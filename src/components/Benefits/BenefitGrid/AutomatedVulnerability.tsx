
import { motion } from 'framer-motion';
import { Search, Brain, Wrench, CheckCircle } from 'lucide-react';
import { useTranslations } from '@/i18n/utils';

export default function AutomatedVulnerability({ lang }) {
  const t = useTranslations(lang);

  const vulnerabilityFlow = [
    { step: t('benefits.vulnerability.flow.detection'), icon: <Search className="w-5 h-5" />, status: 'complete' },
    { step: t('benefits.vulnerability.flow.analysis'), icon: <Brain className="w-5 h-5" />, status: 'active' },
    { step: t('benefits.vulnerability.flow.remediation'), icon: <Wrench className="w-5 h-5" />, status: 'pending' },
    { step: t('benefits.vulnerability.flow.verification'), icon: <CheckCircle className="w-5 h-5" />, status: 'pending' },
  ];

  const vulnerabilities = [
    { id: 'CVE-2023-1234', severity: t('benefits.vulnerability.severity.high'), status: t('benefits.vulnerability.status.autoFixing'), progress: 75 },
    { id: 'CVE-2023-5678', severity: t('benefits.vulnerability.severity.medium'), status: t('benefits.vulnerability.status.fixed'), progress: 100 },
    { id: 'CVE-2023-9012', severity: t('benefits.vulnerability.severity.low'), status: t('benefits.vulnerability.status.analyzing'), progress: 25 },
  ];

  const getStatusText = (status: string) => {
    switch (status) {
      case t('benefits.vulnerability.status.autoFixing'):
        return t('benefits.vulnerability.status.autoFixing');
      case t('benefits.vulnerability.status.fixed'):
        return t('benefits.vulnerability.status.fixed');
      case t('benefits.vulnerability.status.analyzing'):
        return t('benefits.vulnerability.status.analyzing');
      case 'complete': // Handle initial status if needed
        return t('common.status.complete');
      case 'active': // Handle initial status if needed
        return t('common.status.active');
      case 'pending': // Handle initial status if needed
        return t('common.status.pending');
      default:
        return status; // Fallback to original status if key not found
    }
  };


  return (
    <div className="space-y-6">
      <h4 className="text-lg font-semibold text-gray-800 mb-4">{ t('benefits.vulnerability.title') }</h4>

      { /* Flow Steps */ }
      <div className="flex justify-between mb-6">
        { vulnerabilityFlow.map((item, index) => (
          <div key={item.step} className="flex flex-col items-center">
            <motion.div
              animate={{
                scale: item.status === 'active' ? [1, 1.1, 1] : 1,
                rotate: item.status === 'active' ? [0, 5, -5, 0] : 0,
              }}
              transition={{
                duration: 2,
                repeat: item.status === 'active' ? Number.POSITIVE_INFINITY : 0,
              }}
              className={'w-12 h-12 rounded-full flex items-center justify-center mb-2 text-white bg-gradient-to-r from-[#8220ff] to-[#6010cc]'}
            >
              { item.icon }
            </motion.div>
            <span className="text-xs text-gray-600">{ item.step }</span>
          </div>
        )) }
      </div>

      { /* Vulnerability List */ }
      <div className="space-y-3">
        { vulnerabilities.map((vuln, index) => (
          <motion.div
            key={vuln.id}
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3, delay: index * 0.1 }}
            className="bg-gray-50 rounded-lg p-3"
          >
            <div className="flex items-center justify-between mb-2">
              <div className="flex items-center gap-2">
                <span className="font-mono text-sm">{ vuln.id }</span>
                <span
                  className={`text-xs px-2 py-1 rounded ${
                    vuln.severity === t('benefits.vulnerability.severity.high')
                      ? 'bg-red-100 text-red-700'
                      : vuln.severity === t('benefits.vulnerability.severity.medium')
                        ? 'bg-yellow-100 text-yellow-700'
                        : 'bg-blue-100 text-blue-700'
                  }`}
                >
                  { vuln.severity }
                </span>
              </div>
              <span className="text-xs text-gray-600 capitalize">{ getStatusText(vuln.status) }</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2">
              <motion.div
                initial={{ width: 0 }}
                animate={{ width: `${vuln.progress}%` }}
                transition={{ duration: 1, delay: index * 0.2 }}
                className={`h-2 rounded-full ${vuln.progress === 100 ? 'bg-green-500' : 'bg-[#8220ff]'}`}
              />
            </div>
          </motion.div>
        )) }
      </div>
    </div>
  );
}